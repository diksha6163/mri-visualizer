{"ast":null,"code":"/* global X */\n/* global dat */\n\nlet gui;\nlet isCrosshairFixed = false;\nlet threeD, volume, sliceX, sliceY, sliceZ;\nlet sliceX_width, sliceX_height, sliceY_width, sliceY_height, sliceZ_width, sliceZ_height, IndexX, IndexY, IndexZ;\nexport function destroyGUI() {\n  if (gui) {\n    gui.destroy();\n    gui = null;\n  }\n}\n\n// function for update crosshair to given normalized point\n\nexport function updateCrosshair(containerId, x, y, x_, y_, z_) {\n  const svgNamespace = \"http://www.w3.org/2000/svg\";\n  let svg = document.getElementById(containerId + \"-svg\");\n  if (!svg) {\n    svg = document.createElementNS(svgNamespace, \"svg\");\n    svg.setAttribute(\"id\", containerId + \"-svg\");\n    svg.style.position = \"absolute\";\n    svg.style.top = \"0\";\n    svg.style.left = \"0\";\n    svg.style.width = \"100%\";\n    svg.style.height = \"100%\";\n    svg.style.pointerEvents = \"none\";\n    document.getElementById(containerId).appendChild(svg);\n  }\n  let lineX = document.getElementById(containerId + \"-lineX\");\n  let lineY = document.getElementById(containerId + \"-lineY\");\n  if (!lineX) {\n    lineX = document.createElementNS(svgNamespace, \"line\");\n    lineX.setAttribute(\"id\", containerId + \"-lineX\");\n    lineX.setAttribute(\"stroke\", \"red\");\n    svg.appendChild(lineX);\n  }\n  if (!lineY) {\n    lineY = document.createElementNS(svgNamespace, \"line\");\n    lineY.setAttribute(\"id\", containerId + \"-lineY\");\n    lineY.setAttribute(\"stroke\", \"red\");\n    svg.appendChild(lineY);\n  }\n  lineX.setAttribute(\"x1\", x);\n  lineX.setAttribute(\"y1\", \"0\");\n  lineX.setAttribute(\"x2\", x);\n  lineX.setAttribute(\"y2\", \"100%\");\n  lineY.setAttribute(\"x1\", \"0\");\n  lineY.setAttribute(\"y1\", y);\n  lineY.setAttribute(\"x2\", \"100%\");\n  lineY.setAttribute(\"y2\", y);\n\n  // Create or update text element to display coordinates\n  let textElement = document.getElementById(containerId + \"-text\");\n  if (!textElement) {\n    textElement = document.createElementNS(svgNamespace, \"text\");\n    textElement.setAttribute(\"id\", containerId + \"-text\");\n    textElement.setAttribute(\"fill\", \"white\");\n    textElement.setAttribute(\"x\", \"10\"); // Fixed position for simplicity\n    textElement.setAttribute(\"y\", \"20\");\n    svg.appendChild(textElement);\n  }\n  textElement.textContent = `X: ${x_}, Y: ${y_}, Z: ${z_}`;\n}\nexport async function initialize(niiFile) {\n  destroyGUI();\n\n  //\n  // try to create the 3D renderer\n  //\n  console.log(\"NII file: \", niiFile);\n  let _webGLFriendly = true;\n  try {\n    // try to create and initialize a 3D renderer\n    threeD = new X.renderer3D();\n    threeD.container = 'threeD';\n    threeD.init();\n  } catch (Exception) {\n    // no webgl on this machine\n    _webGLFriendly = false;\n  }\n\n  //\n  // create the 2D renderers\n  // .. for the X orientation\n  sliceX = new X.renderer2D();\n  sliceX.container = 'sliceX';\n  sliceX.orientation = 'X';\n  sliceX.init();\n  // .. for Y\n  sliceY = new X.renderer2D();\n  sliceY.container = 'sliceY';\n  sliceY.orientation = 'Y';\n  sliceY.init();\n  // .. and for Z\n  sliceZ = new X.renderer2D();\n  sliceZ.container = 'sliceZ';\n  sliceZ.orientation = 'Z';\n  sliceZ.init();\n  sliceX_width = document.getElementById(\"sliceX\").offsetWidth;\n  sliceX_height = document.getElementById(\"sliceX\").offsetHeight;\n  sliceY_width = document.getElementById(\"sliceY\").offsetWidth;\n  sliceY_height = document.getElementById(\"sliceY\").offsetHeight;\n  sliceZ_width = document.getElementById(\"sliceZ\").offsetWidth;\n  sliceZ_height = document.getElementById(\"sliceZ\").offsetHeight;\n\n  //\n  // THE VOLUME DATA\n  //\n  // create a X.volume\n\n  // console.log(X)\n  volume = new X.volume();\n  console.log(\"1:\", volume.file);\n  console.log(volume.filedata);\n  volume.file = niiFile.name;\n  console.log(\"2:\", volume.file);\n\n  // console.log(typeof(volume.filedata);\n\n  async function LoadFileData() {\n    await niiFile.arrayBuffer().then(result => {\n      volume.filedata = result;\n      // console.log('File Data:', volume.filedata)\n    });\n  }\n\n  const a1 = await LoadFileData(); // wait till file data loaded successfully\n\n  console.log(\"volumn type : \", typeof volume);\n  console.log(\"file type : \" + typeof volume.file);\n  console.log(\"volumn : \", volume);\n  console.log(volume['filedata']);\n\n  // add the volume in the main renderer\n  // we choose the sliceX here, since this should work also on\n  // non-webGL-friendly devices like Safari on iOS\n  sliceX.add(volume);\n\n  // start the loading/rendering\n  sliceX.render();\n\n  //\n  // THE GUI\n  //\n  // the onShowtime method gets executed after all files were fully loaded and\n  // just before the first rendering attempt\n  sliceX.onShowtime = function () {\n    //\n    // add the volume to the other 3 renderers\n    //\n    sliceY.add(volume);\n    sliceY.render();\n    sliceZ.add(volume);\n    sliceZ.render();\n    if (_webGLFriendly) {\n      threeD.add(volume);\n      threeD.render();\n    }\n    IndexX = volume.indexX;\n    IndexY = volume.indexY;\n    IndexZ = volume.indexZ;\n\n    // console.log(gui)\n\n    // if Don't want right side GUI box then comment below code of GUI\n    //-----------------------------------------------------------------------------------------------\n\n    // now the real GUI\n    gui = new dat.GUI();\n    console.log(gui);\n\n    // the following configures the gui for interacting with the X.volume\n    var volumegui = gui.addFolder('Volume');\n    // now we can configure controllers which..\n    // .. switch between slicing and volume rendering\n    var vrController = volumegui.add(volume, 'volumeRendering');\n    // .. configure the volume rendering opacity\n    var opacityController = volumegui.add(volume, 'opacity', 0, 1);\n    // .. and the threshold in the min..max range\n    var lowerThresholdController = volumegui.add(volume, 'lowerThreshold', volume.min, volume.max);\n    var upperThresholdController = volumegui.add(volume, 'upperThreshold', volume.min, volume.max);\n    var lowerWindowController = volumegui.add(volume, 'windowLow', volume.min, volume.max);\n    var upperWindowController = volumegui.add(volume, 'windowHigh', volume.min, volume.max);\n    // the indexX,Y,Z are the currently displayed slice indices in the range\n    // 0..dimensions-1\n    var sliceXController = volumegui.add(volume, 'indexX', 0, volume.range[0] - 1);\n    var sliceYController = volumegui.add(volume, 'indexY', 0, volume.range[1] - 1);\n    var sliceZController = volumegui.add(volume, 'indexZ', 0, volume.range[2] - 1);\n    volumegui.open();\n\n    //--------------------------------------------------------------------------------------------\n\n    //---------------- Click event begin------------------------\n\n    document.getElementById(\"sliceX\").addEventListener(\"click\", function (event) {\n      // console.log('click')\n      if (isCrosshairFixed) {\n        isCrosshairFixed = false;\n      } else {\n        isCrosshairFixed = true;\n      }\n    });\n    document.getElementById(\"sliceY\").addEventListener(\"click\", function (event) {\n      if (isCrosshairFixed) {\n        isCrosshairFixed = false;\n      } else {\n        isCrosshairFixed = true;\n      }\n    });\n    document.getElementById(\"sliceZ\").addEventListener(\"click\", function (event) {\n      if (isCrosshairFixed) {\n        isCrosshairFixed = false;\n      } else {\n        isCrosshairFixed = true;\n      }\n    });\n\n    //--------------------Click event end-------------------------\n\n    //-------------------arrowkey event begin---------------------------------\n\n    // Step 1: Make slice boxes focusable and handle click to focus\n    [\"sliceX\", \"sliceY\", \"sliceZ\"].forEach(id => {\n      const element = document.getElementById(id);\n      element.tabIndex = 0; // Make the element focusable\n      element.addEventListener(\"click\", function () {\n        this.focus(); // Focus the element when clicked\n      });\n    });\n\n    // Step 2: Implement the keydown logic\n\n    // For sliceX\n    document.getElementById(\"sliceX\").addEventListener(\"keydown\", function (event) {\n      event.stopPropagation();\n      event.preventDefault();\n      console.log('key');\n      if (!isCrosshairFixed) isCrosshairFixed = true;\n      const key = event.key;\n      switch (key) {\n        case \"ArrowLeft\":\n          volume.indexY--;\n          break;\n        case \"ArrowRight\":\n          volume.indexY++;\n          break;\n        case \"ArrowUp\":\n          volume.indexZ--;\n          break;\n        case \"ArrowDown\":\n          volume.indexZ++;\n          break;\n        default:\n          break;\n      }\n\n      //Denormalization\n\n      const X_normalizedY = volume.indexY / volume.range[1];\n      const X_normalizedZ = volume.indexZ / volume.range[2];\n      const x = X_normalizedY * sliceX_width;\n      const y = X_normalizedZ * sliceX_height;\n\n      //for plane Y\n\n      const Y_normalizedX = volume.indexX / volume.range[0];\n      const Y_normalizedZ = volume.indexZ / volume.range[2];\n      const Y_boxX = Y_normalizedX * sliceY_width;\n      const Y_boxZ = Y_normalizedZ * sliceY_height;\n\n      //for plane Z\n\n      const Z_normalizedX = volume.indexX / volume.range[0];\n      const Z_normalizedY = volume.indexY / volume.range[1];\n      const Z_boxX = Z_normalizedX * sliceZ_width;\n      const Z_boxY = Z_normalizedY * sliceZ_height;\n\n      // Update crosshair\n      updateCrosshair(\"sliceX\", x, y, volume.indexX, volume.indexY, volume.indexZ);\n      updateCrosshair(\"sliceY\", Y_boxX, Y_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n      updateCrosshair(\"sliceZ\", Z_boxX, Z_boxY, volume.indexX, volume.indexY, volume.indexZ);\n\n      // Re-render slices\n      sliceY.render();\n      sliceZ.render();\n      IndexX = volume.indexX;\n      IndexY = volume.indexY;\n      IndexZ = volume.indexZ;\n    });\n\n    // For sliceY\n    document.getElementById(\"sliceY\").addEventListener(\"keydown\", function (event) {\n      event.stopPropagation();\n      event.preventDefault();\n      if (!isCrosshairFixed) isCrosshairFixed = true;\n      const key = event.key;\n      switch (key) {\n        case \"ArrowLeft\":\n          volume.indexX--;\n          break;\n        case \"ArrowRight\":\n          volume.indexX++;\n          break;\n        case \"ArrowUp\":\n          volume.indexZ--;\n          break;\n        case \"ArrowDown\":\n          volume.indexZ++;\n          break;\n        default:\n          break;\n      }\n\n      //Denormalization\n\n      const Y_normalizedX = volume.indexX / volume.range[0];\n      const Y_normalizedZ = volume.indexZ / volume.range[2];\n      const x = Y_normalizedX * sliceY_width;\n      const y = Y_normalizedZ * sliceY_height;\n\n      //for plane X\n\n      const X_normalizedY = volume.indexY / volume.range[1];\n      const X_normalizedZ = volume.indexZ / volume.range[2];\n      const X_boxY = X_normalizedY * sliceX_width;\n      const X_boxZ = X_normalizedZ * sliceX_height;\n\n      //for plane Z\n\n      const Z_normalizedX = volume.indexX / volume.range[0];\n      const Z_normalizedY = volume.indexY / volume.range[1];\n      const Z_boxX = Z_normalizedX * sliceZ_width;\n      const Z_boxY = Z_normalizedY * sliceZ_height;\n\n      // Update crosshair\n      updateCrosshair(\"sliceX\", X_boxY, X_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n      updateCrosshair(\"sliceY\", x, y, volume.indexX, volume.indexY, volume.indexZ);\n      updateCrosshair(\"sliceZ\", Z_boxX, Z_boxY, volume.indexX, volume.indexY, volume.indexZ);\n\n      // Re-render slices\n      sliceX.render();\n      sliceZ.render();\n      IndexX = volume.indexX;\n      IndexY = volume.indexY;\n      IndexZ = volume.indexZ;\n    });\n\n    // For sliceZ\n    document.getElementById(\"sliceZ\").addEventListener(\"keydown\", function (event) {\n      event.stopPropagation();\n      event.preventDefault();\n      if (!isCrosshairFixed) isCrosshairFixed = true;\n      const key = event.key;\n      switch (key) {\n        case \"ArrowLeft\":\n          volume.indexX--;\n          break;\n        case \"ArrowRight\":\n          volume.indexX++;\n          break;\n        case \"ArrowUp\":\n          volume.indexY--;\n          break;\n        case \"ArrowDown\":\n          volume.indexY++;\n          break;\n        default:\n          break;\n      }\n\n      //Denormalization\n\n      const Z_normalizedX = volume.indexX / volume.range[0];\n      const Z_normalizedY = volume.indexY / volume.range[1];\n      const x = Z_normalizedX * sliceZ_width;\n      const y = Z_normalizedY * sliceZ_height;\n\n      //for plane X\n\n      const X_normalizedY = volume.indexY / volume.range[1];\n      const X_normalizedZ = volume.indexZ / volume.range[2];\n      const X_boxY = X_normalizedY * sliceX_width;\n      const X_boxZ = X_normalizedZ * sliceX_height;\n\n      //for plane Y\n\n      const Y_normalizedX = volume.indexX / volume.range[0];\n      const Y_normalizedZ = volume.indexZ / volume.range[2];\n      const Y_boxX = Y_normalizedX * sliceY_width;\n      const Y_boxZ = Y_normalizedZ * sliceY_height;\n\n      // Update crosshair\n      updateCrosshair(\"sliceX\", X_boxY, X_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n      updateCrosshair(\"sliceY\", Y_boxX, Y_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n      updateCrosshair(\"sliceZ\", x, y, volume.indexX, volume.indexY, volume.indexZ);\n\n      // Re-render slices\n      sliceX.render();\n      sliceY.render();\n      IndexX = volume.indexX;\n      IndexY = volume.indexY;\n      IndexZ = volume.indexZ;\n    });\n\n    //----------------------arrow key end-----------------------------------------\n\n    //-----------------mousemove event begin--------------------------------------\n\n    // Adding mousemove event listener to sliceX container\n    document.getElementById(\"sliceX\").addEventListener(\"mousemove\", function (event) {\n      if (isCrosshairFixed) return;\n      const rect = this.getBoundingClientRect();\n      const x = event.clientX - rect.left; // x position within the element.\n      const y = event.clientY - rect.top; // y position within the element.\n\n      //Normalization\n      // Normalize these coordinates and map them to the volume dimensions\n      const normalizedX = x / sliceX_width;\n      const normalizedY = y / sliceX_height;\n      const newSliceY = Math.floor(normalizedX * volume.range[1]);\n      const newSliceZ = Math.floor(normalizedY * volume.range[2]);\n\n      // Update slices in other 2D renderers\n      volume.indexY = newSliceY;\n      volume.indexZ = newSliceZ;\n\n      // set crosshair for other planes\n\n      //for plane Y\n\n      const Y_normalizedX = volume.indexX / volume.range[0];\n      const Y_normalizedZ = volume.indexZ / volume.range[2];\n      const Y_boxX = Y_normalizedX * sliceY_width;\n      const Y_boxZ = Y_normalizedZ * sliceY_height;\n\n      //for plane Z\n\n      const Z_normalizedX = volume.indexX / volume.range[0];\n      const Z_normalizedY = volume.indexY / volume.range[1];\n      const Z_boxX = Z_normalizedX * sliceZ_width;\n      const Z_boxY = Z_normalizedY * sliceZ_height;\n\n      // Update crosshair\n      updateCrosshair(\"sliceX\", x, y, volume.indexX, volume.indexY, volume.indexZ);\n      updateCrosshair(\"sliceY\", Y_boxX, Y_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n      updateCrosshair(\"sliceZ\", Z_boxX, Z_boxY, volume.indexX, volume.indexY, volume.indexZ);\n\n      // Re-render slices\n      sliceY.render();\n      sliceZ.render();\n      IndexX = volume.indexX;\n      IndexY = volume.indexY;\n      IndexZ = volume.indexZ;\n    });\n\n    // Adding mousemove event listener to sliceY container\n    document.getElementById(\"sliceY\").addEventListener(\"mousemove\", function (event) {\n      if (isCrosshairFixed) return;\n      const rect = this.getBoundingClientRect();\n      const x = event.clientX - rect.left; // x position within the element.\n      const y = event.clientY - rect.top; // y position within the element.\n\n      //Normalization\n      // Normalize these coordinates and map them to the volume dimensions\n      const normalizedX = x / sliceY_width;\n      const normalizedY = y / sliceY_height;\n      const newSliceX = Math.floor(normalizedX * volume.range[0]);\n      const newSliceZ = Math.floor(normalizedY * volume.range[2]);\n\n      // Update slices in other 2D renderers\n      volume.indexX = newSliceX;\n      volume.indexZ = newSliceZ;\n\n      //for plane X\n\n      const X_normalizedY = volume.indexY / volume.range[1];\n      const X_normalizedZ = volume.indexZ / volume.range[2];\n      const X_boxY = X_normalizedY * sliceX_width;\n      const X_boxZ = X_normalizedZ * sliceX_height;\n\n      //for plane Z\n\n      const Z_normalizedX = volume.indexX / volume.range[0];\n      const Z_normalizedY = volume.indexY / volume.range[1];\n      const Z_boxX = Z_normalizedX * sliceZ_width;\n      const Z_boxY = Z_normalizedY * sliceZ_height;\n\n      // Update crosshair\n      updateCrosshair(\"sliceY\", x, y, volume.indexX, volume.indexY, volume.indexZ);\n      updateCrosshair(\"sliceX\", X_boxY, X_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n      updateCrosshair(\"sliceZ\", Z_boxX, Z_boxY, volume.indexX, volume.indexY, volume.indexZ);\n\n      // Re-render slices\n      sliceX.render();\n      sliceZ.render();\n      IndexX = volume.indexX;\n      IndexY = volume.indexY;\n      IndexZ = volume.indexZ;\n    });\n\n    // Adding mousemove event listener to sliceZ container\n    document.getElementById(\"sliceZ\").addEventListener(\"mousemove\", function (event) {\n      if (isCrosshairFixed) return;\n      const rect = this.getBoundingClientRect();\n      const x = event.clientX - rect.left; // x position within the element.\n      const y = event.clientY - rect.top; // y position within the element.\n\n      //Normalization\n      // Normalize these coordinates and map them to the volume dimensions\n      const normalizedX = x / this.offsetWidth;\n      const normalizedY = y / this.offsetHeight;\n      const newSliceX = Math.floor(normalizedX * volume.range[0]);\n      const newSliceY = Math.floor(normalizedY * volume.range[1]);\n\n      // Update slices in other 2D renderers\n      volume.indexX = newSliceX;\n      volume.indexY = newSliceY;\n\n      //for plane X\n\n      const X_normalizedY = volume.indexY / volume.range[1];\n      const X_normalizedZ = volume.indexZ / volume.range[2];\n      const X_boxY = X_normalizedY * sliceX_width;\n      const X_boxZ = X_normalizedZ * sliceX_height;\n\n      //for plane Y\n\n      const Y_normalizedX = volume.indexX / volume.range[0];\n      const Y_normalizedZ = volume.indexZ / volume.range[2];\n      const Y_boxX = Y_normalizedX * sliceY_width;\n      const Y_boxZ = Y_normalizedZ * sliceY_height;\n\n      // Update crosshair\n      updateCrosshair(\"sliceZ\", x, y, volume.indexX, volume.indexY, volume.indexZ);\n      updateCrosshair(\"sliceX\", X_boxY, X_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n      updateCrosshair(\"sliceY\", Y_boxX, Y_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n\n      // Re-render slices\n      sliceX.render();\n      sliceY.render();\n      IndexX = volume.indexX;\n      IndexY = volume.indexY;\n      IndexZ = volume.indexZ;\n    });\n    //---------------------mousemove event end--------------------\n  };\n}\n\n//function for set any point \nexport function setPoint(InX, InY, InZ) {\n  // take normalized points\n\n  isCrosshairFixed = true;\n  volume.indexX = InX;\n  volume.indexY = InY;\n  volume.indexZ = InZ;\n  console.log(InX, InY, InZ);\n  console.log(volume.indexX, volume.indexY, volume.indexZ);\n\n  //Denormalization\n  //for plane X\n  const X_normalizedY = volume.indexY / volume.range[1];\n  const X_normalizedZ = volume.indexZ / volume.range[2];\n  const X_boxY = X_normalizedY * sliceX_width;\n  const X_boxZ = X_normalizedZ * sliceX_height;\n\n  //for plane Y\n\n  const Y_normalizedX = volume.indexX / volume.range[0];\n  const Y_normalizedZ = volume.indexZ / volume.range[2];\n  const Y_boxX = Y_normalizedX * sliceY_width;\n  const Y_boxZ = Y_normalizedZ * sliceY_height;\n\n  //for plane Z\n\n  const Z_normalizedX = volume.indexX / volume.range[0];\n  const Z_normalizedY = volume.indexY / volume.range[1];\n  const Z_boxX = Z_normalizedX * sliceZ_width;\n  const Z_boxY = Z_normalizedY * sliceZ_height;\n\n  // Update crosshair\n  updateCrosshair(\"sliceX\", X_boxY, X_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n  updateCrosshair(\"sliceY\", Y_boxX, Y_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n  updateCrosshair(\"sliceZ\", Z_boxX, Z_boxY, volume.indexX, volume.indexY, volume.indexZ);\n\n  //re-render slices\n\n  sliceX.render();\n  sliceY.render();\n  sliceZ.render();\n  IndexX = volume.indexX;\n  IndexY = volume.indexY;\n  IndexZ = volume.indexZ;\n}\nexport function addPoint() {\n  return {\n    'x': IndexX,\n    'y': IndexY,\n    'z': IndexZ\n  };\n}\n\n// export function destroyGUI() {\n//     if (gui) {\n//         gui.destroy();\n//     }\n// }","map":{"version":3,"names":["gui","isCrosshairFixed","threeD","volume","sliceX","sliceY","sliceZ","sliceX_width","sliceX_height","sliceY_width","sliceY_height","sliceZ_width","sliceZ_height","IndexX","IndexY","IndexZ","destroyGUI","destroy","updateCrosshair","containerId","x","y","x_","y_","z_","svgNamespace","svg","document","getElementById","createElementNS","setAttribute","style","position","top","left","width","height","pointerEvents","appendChild","lineX","lineY","textElement","textContent","initialize","niiFile","console","log","_webGLFriendly","X","renderer3D","container","init","Exception","renderer2D","orientation","offsetWidth","offsetHeight","file","filedata","name","LoadFileData","arrayBuffer","then","result","a1","add","render","onShowtime","indexX","indexY","indexZ","dat","GUI","volumegui","addFolder","vrController","opacityController","lowerThresholdController","min","max","upperThresholdController","lowerWindowController","upperWindowController","sliceXController","range","sliceYController","sliceZController","open","addEventListener","event","forEach","id","element","tabIndex","focus","stopPropagation","preventDefault","key","X_normalizedY","X_normalizedZ","Y_normalizedX","Y_normalizedZ","Y_boxX","Y_boxZ","Z_normalizedX","Z_normalizedY","Z_boxX","Z_boxY","X_boxY","X_boxZ","rect","getBoundingClientRect","clientX","clientY","normalizedX","normalizedY","newSliceY","Math","floor","newSliceZ","newSliceX","setPoint","InX","InY","InZ","addPoint"],"sources":["/Users/dikshayadav/BrainViz/mri visualizer/src/main.js"],"sourcesContent":["/* global X */\n/* global dat */\n\nlet gui;\nlet isCrosshairFixed = false;\nlet threeD, volume, sliceX, sliceY, sliceZ;\nlet sliceX_width, sliceX_height, sliceY_width, sliceY_height, sliceZ_width, sliceZ_height, IndexX, IndexY, IndexZ;\n\n\nexport function destroyGUI() {\n  if (gui) {\n    gui.destroy();\n    gui = null;\n  }\n}\n\n\n// function for update crosshair to given normalized point\n\nexport function updateCrosshair(containerId, x, y, x_, y_, z_) {\n    const svgNamespace = \"http://www.w3.org/2000/svg\";\n  \n    let svg = document.getElementById(containerId + \"-svg\");\n    if (!svg) {\n      svg = document.createElementNS(svgNamespace, \"svg\");\n      svg.setAttribute(\"id\", containerId + \"-svg\");\n      svg.style.position = \"absolute\";\n      svg.style.top = \"0\";\n      svg.style.left = \"0\";\n      svg.style.width = \"100%\";\n      svg.style.height = \"100%\";\n      svg.style.pointerEvents = \"none\";\n      document.getElementById(containerId).appendChild(svg);\n    }\n  \n    let lineX = document.getElementById(containerId + \"-lineX\");\n    let lineY = document.getElementById(containerId + \"-lineY\");\n  \n    if (!lineX) {\n      lineX = document.createElementNS(svgNamespace, \"line\");\n      lineX.setAttribute(\"id\", containerId + \"-lineX\");\n      lineX.setAttribute(\"stroke\", \"red\");\n      svg.appendChild(lineX);\n    }\n  \n    if (!lineY) {\n      lineY = document.createElementNS(svgNamespace, \"line\");\n      lineY.setAttribute(\"id\", containerId + \"-lineY\");\n      lineY.setAttribute(\"stroke\", \"red\");\n      svg.appendChild(lineY);\n    }\n  \n    lineX.setAttribute(\"x1\", x);\n    lineX.setAttribute(\"y1\", \"0\");\n    lineX.setAttribute(\"x2\", x);\n    lineX.setAttribute(\"y2\", \"100%\");\n  \n    lineY.setAttribute(\"x1\", \"0\");\n    lineY.setAttribute(\"y1\", y);\n    lineY.setAttribute(\"x2\", \"100%\");\n    lineY.setAttribute(\"y2\", y);\n\n    // Create or update text element to display coordinates\n    let textElement = document.getElementById(containerId + \"-text\");\n    if (!textElement) {\n        textElement = document.createElementNS(svgNamespace, \"text\");\n        textElement.setAttribute(\"id\", containerId + \"-text\");\n        textElement.setAttribute(\"fill\", \"white\");\n        textElement.setAttribute(\"x\", \"10\"); // Fixed position for simplicity\n        textElement.setAttribute(\"y\", \"20\");\n        svg.appendChild(textElement);\n    }\n\n    textElement.textContent = `X: ${x_}, Y: ${y_}, Z: ${z_}`;\n  }\n\nexport async function initialize(niiFile) {\n\n    destroyGUI();\n\n        //\n        // try to create the 3D renderer\n        //\n        console.log(\"NII file: \", niiFile);\n        let _webGLFriendly = true;\n        try {\n            // try to create and initialize a 3D renderer\n            threeD = new X.renderer3D();\n            threeD.container = 'threeD';\n            threeD.init();\n        } catch (Exception) {\n\n            // no webgl on this machine\n            _webGLFriendly = false;\n\n        }\n\n        //\n        // create the 2D renderers\n        // .. for the X orientation\n        sliceX = new X.renderer2D();\n        sliceX.container = 'sliceX';\n        sliceX.orientation = 'X';\n        sliceX.init();\n        // .. for Y\n        sliceY = new X.renderer2D();\n        sliceY.container = 'sliceY';\n        sliceY.orientation = 'Y';\n        sliceY.init();\n        // .. and for Z\n        sliceZ = new X.renderer2D();\n        sliceZ.container = 'sliceZ';\n        sliceZ.orientation = 'Z';\n        sliceZ.init();\n\n        sliceX_width = document.getElementById(\"sliceX\").offsetWidth;\n        sliceX_height = document.getElementById(\"sliceX\").offsetHeight;\n        sliceY_width = document.getElementById(\"sliceY\").offsetWidth;\n        sliceY_height = document.getElementById(\"sliceY\").offsetHeight;\n        sliceZ_width = document.getElementById(\"sliceZ\").offsetWidth;\n        sliceZ_height = document.getElementById(\"sliceZ\").offsetHeight;\n\n\n        //\n        // THE VOLUME DATA\n        //\n        // create a X.volume\n\n        // console.log(X)\n        volume = new X.volume();\n\n        console.log(\"1:\", volume.file)\n        console.log(volume.filedata)\n        volume.file=niiFile.name;\n        console.log(\"2:\", volume.file)\n\n        // console.log(typeof(volume.filedata);\n\n        async function LoadFileData()\n        {\n          await niiFile.arrayBuffer().then(result=>{\n\n              volume.filedata = result;\n              // console.log('File Data:', volume.filedata)\n\n            })           \n        }\n\n        const a1 = await LoadFileData();     // wait till file data loaded successfully\n\n\n        console.log(\"volumn type : \",typeof(volume));\n        console.log(\"file type : \" + typeof(volume.file));\n        console.log(\"volumn : \",volume);\n        console.log(volume['filedata'])\n\n        // add the volume in the main renderer\n        // we choose the sliceX here, since this should work also on\n        // non-webGL-friendly devices like Safari on iOS\n        sliceX.add(volume);\n\n        // start the loading/rendering\n        sliceX.render();\n\n        //\n        // THE GUI\n        //\n        // the onShowtime method gets executed after all files were fully loaded and\n        // just before the first rendering attempt\n        sliceX.onShowtime = function () {\n\n            //\n            // add the volume to the other 3 renderers\n            //\n            sliceY.add(volume);\n            sliceY.render();\n            sliceZ.add(volume);\n            sliceZ.render();\n\n            if (_webGLFriendly) {\n                threeD.add(volume);\n                threeD.render();\n            }\n\n            IndexX = volume.indexX;\n            IndexY = volume.indexY;\n            IndexZ = volume.indexZ;\n\n            // console.log(gui)\n\n            // if Don't want right side GUI box then comment below code of GUI\n//-----------------------------------------------------------------------------------------------\n\n            // now the real GUI\n            gui = new dat.GUI();\n            console.log(gui)\n\n\n            // the following configures the gui for interacting with the X.volume\n            var volumegui = gui.addFolder('Volume');\n            // now we can configure controllers which..\n            // .. switch between slicing and volume rendering\n            var vrController = volumegui.add(volume, 'volumeRendering');\n            // .. configure the volume rendering opacity\n            var opacityController = volumegui.add(volume, 'opacity', 0, 1);\n            // .. and the threshold in the min..max range\n            var lowerThresholdController = volumegui.add(volume, 'lowerThreshold',\n                volume.min, volume.max);\n            var upperThresholdController = volumegui.add(volume, 'upperThreshold',\n                volume.min, volume.max);\n            var lowerWindowController = volumegui.add(volume, 'windowLow', volume.min,\n                volume.max);\n            var upperWindowController = volumegui.add(volume, 'windowHigh', volume.min,\n                volume.max);\n            // the indexX,Y,Z are the currently displayed slice indices in the range\n            // 0..dimensions-1\n            var sliceXController = volumegui.add(volume, 'indexX', 0,\n                volume.range[0] - 1);\n            var sliceYController = volumegui.add(volume, 'indexY', 0,\n                volume.range[1] - 1);\n            var sliceZController = volumegui.add(volume, 'indexZ', 0,\n                volume.range[2] - 1);\n            volumegui.open();\n\n//--------------------------------------------------------------------------------------------\n\n//---------------- Click event begin------------------------\n\ndocument.getElementById(\"sliceX\").addEventListener(\"click\", function(event) {\n  // console.log('click')\n  if (isCrosshairFixed) {\n      isCrosshairFixed = false;\n  } else {\n      isCrosshairFixed = true;\n  }\n});\ndocument.getElementById(\"sliceY\").addEventListener(\"click\", function(event) {\n  if (isCrosshairFixed) {\n      isCrosshairFixed = false;\n  } else {\n      isCrosshairFixed = true;\n  }\n});\ndocument.getElementById(\"sliceZ\").addEventListener(\"click\", function(event) {\n  if (isCrosshairFixed) {\n      isCrosshairFixed = false;\n  } else {\n      isCrosshairFixed = true;\n  }\n});\n\n//--------------------Click event end-------------------------\n\n//-------------------arrowkey event begin---------------------------------\n\n// Step 1: Make slice boxes focusable and handle click to focus\n[\"sliceX\", \"sliceY\", \"sliceZ\"].forEach(id => {\n    const element = document.getElementById(id);\n    element.tabIndex = 0;  // Make the element focusable\n    element.addEventListener(\"click\", function() {\n        this.focus();  // Focus the element when clicked\n    });\n});\n\n// Step 2: Implement the keydown logic\n\n// For sliceX\ndocument.getElementById(\"sliceX\").addEventListener(\"keydown\", function(event) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    console.log('key')\n    if(!isCrosshairFixed)\n    isCrosshairFixed = true;\n  \n    const key = event.key;\n  \n    switch(key){\n  \n      case \"ArrowLeft\":      \n  \n      volume.indexY--;\n      break;\n  \n      case \"ArrowRight\":     \n  \n      volume.indexY++;\n      break;\n  \n      case \"ArrowUp\":      \n  \n      volume.indexZ--;\n      break;  \n      \n      case \"ArrowDown\":\n  \n      volume.indexZ++; \n      break; \n\n      default:\n      break;\n  \n    }\n  \n    //Denormalization\n\n    const X_normalizedY = volume.indexY / volume.range[1];\n    const X_normalizedZ = volume.indexZ / volume.range[2];\n\n    const x = X_normalizedY * sliceX_width;\n    const y = X_normalizedZ * sliceX_height;\n\n      //for plane Y\n  \n      const Y_normalizedX =  volume.indexX / volume.range[0];\n      const Y_normalizedZ =  volume.indexZ / volume.range[2];\n  \n      const Y_boxX = Y_normalizedX * sliceY_width;\n      const Y_boxZ = Y_normalizedZ * sliceY_height;\n      \n      //for plane Z\n  \n      const Z_normalizedX =  volume.indexX / volume.range[0];\n      const Z_normalizedY =  volume.indexY / volume.range[1];\n  \n      const Z_boxX = Z_normalizedX * sliceZ_width;\n      const Z_boxY = Z_normalizedY * sliceZ_height; \n  \n      // Update crosshair\n      updateCrosshair(\"sliceX\", x, y, volume.indexX, volume.indexY, volume.indexZ);\n      updateCrosshair(\"sliceY\", Y_boxX, Y_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n      updateCrosshair(\"sliceZ\", Z_boxX, Z_boxY, volume.indexX, volume.indexY, volume.indexZ);\n  \n      // Re-render slices\n      sliceY.render();\n      sliceZ.render();\n\n      IndexX = volume.indexX;\n      IndexY = volume.indexY;\n      IndexZ = volume.indexZ;\n  \n});\n\n// For sliceY\ndocument.getElementById(\"sliceY\").addEventListener(\"keydown\", function(event) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    if(!isCrosshairFixed)\n    isCrosshairFixed = true;\n  \n    const key = event.key;\n  \n    switch(key){\n  \n      case \"ArrowLeft\":      \n  \n      volume.indexX--;\n      break;\n  \n      case \"ArrowRight\":     \n  \n      volume.indexX++;\n      break;\n  \n      case \"ArrowUp\":      \n  \n      volume.indexZ--;\n      break;  \n      \n      case \"ArrowDown\":\n  \n      volume.indexZ++; \n      break; \n\n      default:\n      break;\n  \n    }\n\n    //Denormalization\n  \n    const Y_normalizedX = volume.indexX / volume.range[0];\n    const Y_normalizedZ = volume.indexZ / volume.range[2];\n\n    const x = Y_normalizedX * sliceY_width;\n    const y = Y_normalizedZ * sliceY_height;\n\n      //for plane X\n  \n      const X_normalizedY =  volume.indexY / volume.range[1];\n      const X_normalizedZ =  volume.indexZ / volume.range[2];\n  \n      const X_boxY = X_normalizedY * sliceX_width;\n      const X_boxZ = X_normalizedZ * sliceX_height;\n      \n      //for plane Z\n  \n      const Z_normalizedX =  volume.indexX / volume.range[0];\n      const Z_normalizedY =  volume.indexY / volume.range[1];\n  \n      const Z_boxX = Z_normalizedX * sliceZ_width;\n      const Z_boxY = Z_normalizedY * sliceZ_height; \n  \n      // Update crosshair\n      updateCrosshair(\"sliceX\", X_boxY, X_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n      updateCrosshair(\"sliceY\", x, y, volume.indexX, volume.indexY, volume.indexZ);\n      updateCrosshair(\"sliceZ\", Z_boxX, Z_boxY, volume.indexX, volume.indexY, volume.indexZ);\n  \n      // Re-render slices\n      sliceX.render();\n      sliceZ.render();\n\n      IndexX = volume.indexX;\n      IndexY = volume.indexY;\n      IndexZ = volume.indexZ;\n});\n\n// For sliceZ\ndocument.getElementById(\"sliceZ\").addEventListener(\"keydown\", function(event) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    if(!isCrosshairFixed)\n    isCrosshairFixed = true;\n  \n    const key = event.key;\n  \n    switch(key){\n  \n      case \"ArrowLeft\":      \n  \n      volume.indexX--;\n      break;\n  \n      case \"ArrowRight\":     \n  \n      volume.indexX++;\n      break;\n  \n      case \"ArrowUp\":      \n  \n      volume.indexY--;\n      break;  \n      \n      case \"ArrowDown\":\n  \n      volume.indexY++; \n      break; \n\n      default:\n      break;\n\n  \n    }\n\n    //Denormalization\n  \n    const Z_normalizedX = volume.indexX / volume.range[0];\n    const Z_normalizedY = volume.indexY / volume.range[1];\n    \n    const x = Z_normalizedX * sliceZ_width;\n    const y = Z_normalizedY * sliceZ_height;\n\n      //for plane X\n  \n      const X_normalizedY =  volume.indexY / volume.range[1];\n      const X_normalizedZ =  volume.indexZ / volume.range[2];\n  \n      const X_boxY = X_normalizedY * sliceX_width;\n      const X_boxZ = X_normalizedZ * sliceX_height;\n      \n      //for plane Y\n  \n      const Y_normalizedX =  volume.indexX / volume.range[0];\n      const Y_normalizedZ =  volume.indexZ / volume.range[2];\n  \n      const Y_boxX = Y_normalizedX * sliceY_width;\n      const Y_boxZ = Y_normalizedZ * sliceY_height; \n  \n      // Update crosshair\n      updateCrosshair(\"sliceX\", X_boxY, X_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n      updateCrosshair(\"sliceY\", Y_boxX, Y_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n      updateCrosshair(\"sliceZ\", x, y, volume.indexX, volume.indexY, volume.indexZ);\n  \n      // Re-render slices\n      sliceX.render();\n      sliceY.render();\n\n      IndexX = volume.indexX;\n      IndexY = volume.indexY;\n      IndexZ = volume.indexZ;\n});\n\n//----------------------arrow key end-----------------------------------------\n\n//-----------------mousemove event begin--------------------------------------\n\n// Adding mousemove event listener to sliceX container\ndocument.getElementById(\"sliceX\").addEventListener(\"mousemove\", function (event) {\n\n  if(isCrosshairFixed)\n  return;\n\n    const rect = this.getBoundingClientRect();\n    const x = event.clientX - rect.left; // x position within the element.\n    const y = event.clientY - rect.top;  // y position within the element.\n\n    //Normalization\n    // Normalize these coordinates and map them to the volume dimensions\n    const normalizedX = x / sliceX_width;\n    const normalizedY = y / sliceX_height;\n\n    const newSliceY = Math.floor(normalizedX * volume.range[1]);\n    const newSliceZ = Math.floor(normalizedY * volume.range[2]);\n\n    // Update slices in other 2D renderers\n    volume.indexY = newSliceY;\n    volume.indexZ = newSliceZ;\n\n    // set crosshair for other planes\n    \n    //for plane Y\n\n    const Y_normalizedX =  volume.indexX / volume.range[0];\n    const Y_normalizedZ =  volume.indexZ / volume.range[2];\n\n    const Y_boxX = Y_normalizedX * sliceY_width;\n    const Y_boxZ = Y_normalizedZ * sliceY_height;\n    \n    //for plane Z\n\n    const Z_normalizedX =  volume.indexX / volume.range[0];\n    const Z_normalizedY =  volume.indexY / volume.range[1];\n\n    const Z_boxX = Z_normalizedX * sliceZ_width;\n    const Z_boxY = Z_normalizedY * sliceZ_height;\n\n    // Update crosshair\n    updateCrosshair(\"sliceX\", x, y, volume.indexX, volume.indexY, volume.indexZ);\n    updateCrosshair(\"sliceY\", Y_boxX, Y_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n    updateCrosshair(\"sliceZ\", Z_boxX, Z_boxY, volume.indexX, volume.indexY, volume.indexZ);\n\n    // Re-render slices\n    sliceY.render();\n    sliceZ.render();\n\n    IndexX = volume.indexX;\n    IndexY = volume.indexY;\n    IndexZ = volume.indexZ;\n\n        });\n\n// Adding mousemove event listener to sliceY container\ndocument.getElementById(\"sliceY\").addEventListener(\"mousemove\", function (event) {\n\n    if(isCrosshairFixed)\n    return;\n\n    const rect = this.getBoundingClientRect();\n    const x = event.clientX - rect.left; // x position within the element.\n    const y = event.clientY - rect.top;  // y position within the element.\n\n    //Normalization\n    // Normalize these coordinates and map them to the volume dimensions\n    const normalizedX = x / sliceY_width;\n    const normalizedY = y / sliceY_height;\n\n    const newSliceX = Math.floor(normalizedX * volume.range[0]);\n    const newSliceZ = Math.floor(normalizedY * volume.range[2]);\n\n    // Update slices in other 2D renderers\n    volume.indexX = newSliceX;\n    volume.indexZ = newSliceZ;\n    \n    //for plane X\n\n    const X_normalizedY =  volume.indexY / volume.range[1];\n    const X_normalizedZ =  volume.indexZ / volume.range[2];\n\n    const X_boxY = X_normalizedY * sliceX_width;\n    const X_boxZ = X_normalizedZ * sliceX_height;\n    \n    //for plane Z\n\n    const Z_normalizedX =  volume.indexX / volume.range[0];\n    const Z_normalizedY =  volume.indexY / volume.range[1];\n\n    const Z_boxX = Z_normalizedX * sliceZ_width;\n    const Z_boxY = Z_normalizedY * sliceZ_height;\n\n    // Update crosshair\n    updateCrosshair(\"sliceY\", x, y, volume.indexX, volume.indexY, volume.indexZ);\n    updateCrosshair(\"sliceX\", X_boxY, X_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n    updateCrosshair(\"sliceZ\", Z_boxX, Z_boxY, volume.indexX, volume.indexY, volume.indexZ);\n\n    // Re-render slices\n    sliceX.render();\n    sliceZ.render();\n\n    IndexX = volume.indexX;\n    IndexY = volume.indexY;\n    IndexZ = volume.indexZ;\n\n        });\n\n// Adding mousemove event listener to sliceZ container\ndocument.getElementById(\"sliceZ\").addEventListener(\"mousemove\", function (event) {\n\n  if(isCrosshairFixed)\n  return;\n\n    const rect = this.getBoundingClientRect();\n    const x = event.clientX - rect.left; // x position within the element.\n    const y = event.clientY - rect.top;  // y position within the element.\n\n    //Normalization\n    // Normalize these coordinates and map them to the volume dimensions\n    const normalizedX = x / this.offsetWidth;\n    const normalizedY = y / this.offsetHeight;\n\n    const newSliceX = Math.floor(normalizedX * volume.range[0]);\n    const newSliceY = Math.floor(normalizedY * volume.range[1]);\n\n    // Update slices in other 2D renderers\n    volume.indexX = newSliceX;\n    volume.indexY = newSliceY;\n    \n    //for plane X\n\n    const X_normalizedY =  volume.indexY / volume.range[1];\n    const X_normalizedZ =  volume.indexZ / volume.range[2];\n\n    const X_boxY = X_normalizedY * sliceX_width;\n    const X_boxZ = X_normalizedZ * sliceX_height;\n    \n    //for plane Y\n\n    const Y_normalizedX =  volume.indexX / volume.range[0];\n    const Y_normalizedZ =  volume.indexZ / volume.range[2];\n\n    const Y_boxX = Y_normalizedX * sliceY_width;\n    const Y_boxZ = Y_normalizedZ * sliceY_height;\n\n    // Update crosshair\n    updateCrosshair(\"sliceZ\", x, y, volume.indexX, volume.indexY, volume.indexZ);\n    updateCrosshair(\"sliceX\", X_boxY, X_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n    updateCrosshair(\"sliceY\", Y_boxX, Y_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n\n\n    // Re-render slices\n    sliceX.render();\n    sliceY.render();\n\n    IndexX = volume.indexX;\n    IndexY = volume.indexY;\n    IndexZ = volume.indexZ;\n\n        });\n//---------------------mousemove event end--------------------\n\n    };\n\n\n}\n\n//function for set any point \nexport function setPoint(InX, InY, InZ){    // take normalized points\n\n    isCrosshairFixed = true;\n\n    volume.indexX = InX;\n    volume.indexY = InY;\n    volume.indexZ = InZ;\n\n    console.log(InX, InY, InZ);\n    console.log(volume.indexX, volume.indexY, volume.indexZ);\n\n\n    //Denormalization\n    //for plane X\n    const X_normalizedY = volume.indexY / volume.range[1];\n    const X_normalizedZ = volume.indexZ / volume.range[2];\n\n    const X_boxY = X_normalizedY * sliceX_width;\n    const X_boxZ = X_normalizedZ * sliceX_height;\n  \n    //for plane Y\n  \n    const Y_normalizedX =  volume.indexX / volume.range[0];\n    const Y_normalizedZ =  volume.indexZ / volume.range[2];\n\n    const Y_boxX = Y_normalizedX * sliceY_width;\n    const Y_boxZ = Y_normalizedZ * sliceY_height;\n    \n    //for plane Z\n\n    const Z_normalizedX =  volume.indexX / volume.range[0];\n    const Z_normalizedY =  volume.indexY / volume.range[1];\n\n    const Z_boxX = Z_normalizedX * sliceZ_width;\n    const Z_boxY = Z_normalizedY * sliceZ_height; \n\n    // Update crosshair\n    updateCrosshair(\"sliceX\", X_boxY, X_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n    updateCrosshair(\"sliceY\", Y_boxX, Y_boxZ, volume.indexX, volume.indexY, volume.indexZ);\n    updateCrosshair(\"sliceZ\", Z_boxX, Z_boxY, volume.indexX, volume.indexY, volume.indexZ);\n\n\n    //re-render slices\n\n    sliceX.render();\n    sliceY.render();\n    sliceZ.render();\n\n    IndexX = volume.indexX;\n    IndexY = volume.indexY;\n    IndexZ = volume.indexZ;\n\n}\n\nexport function addPoint(){\n\n    return ({'x':IndexX,'y': IndexY,'z': IndexZ})\n\n}\n\n// export function destroyGUI() {\n//     if (gui) {\n//         gui.destroy();\n//     }\n// }\n"],"mappings":"AAAA;AACA;;AAEA,IAAIA,GAAG;AACP,IAAIC,gBAAgB,GAAG,KAAK;AAC5B,IAAIC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM;AAC1C,IAAIC,YAAY,EAAEC,aAAa,EAAEC,YAAY,EAAEC,aAAa,EAAEC,YAAY,EAAEC,aAAa,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM;AAGjH,OAAO,SAASC,UAAUA,CAAA,EAAG;EAC3B,IAAIhB,GAAG,EAAE;IACPA,GAAG,CAACiB,OAAO,CAAC,CAAC;IACbjB,GAAG,GAAG,IAAI;EACZ;AACF;;AAGA;;AAEA,OAAO,SAASkB,eAAeA,CAACC,WAAW,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;EAC3D,MAAMC,YAAY,GAAG,4BAA4B;EAEjD,IAAIC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAACT,WAAW,GAAG,MAAM,CAAC;EACvD,IAAI,CAACO,GAAG,EAAE;IACRA,GAAG,GAAGC,QAAQ,CAACE,eAAe,CAACJ,YAAY,EAAE,KAAK,CAAC;IACnDC,GAAG,CAACI,YAAY,CAAC,IAAI,EAAEX,WAAW,GAAG,MAAM,CAAC;IAC5CO,GAAG,CAACK,KAAK,CAACC,QAAQ,GAAG,UAAU;IAC/BN,GAAG,CAACK,KAAK,CAACE,GAAG,GAAG,GAAG;IACnBP,GAAG,CAACK,KAAK,CAACG,IAAI,GAAG,GAAG;IACpBR,GAAG,CAACK,KAAK,CAACI,KAAK,GAAG,MAAM;IACxBT,GAAG,CAACK,KAAK,CAACK,MAAM,GAAG,MAAM;IACzBV,GAAG,CAACK,KAAK,CAACM,aAAa,GAAG,MAAM;IAChCV,QAAQ,CAACC,cAAc,CAACT,WAAW,CAAC,CAACmB,WAAW,CAACZ,GAAG,CAAC;EACvD;EAEA,IAAIa,KAAK,GAAGZ,QAAQ,CAACC,cAAc,CAACT,WAAW,GAAG,QAAQ,CAAC;EAC3D,IAAIqB,KAAK,GAAGb,QAAQ,CAACC,cAAc,CAACT,WAAW,GAAG,QAAQ,CAAC;EAE3D,IAAI,CAACoB,KAAK,EAAE;IACVA,KAAK,GAAGZ,QAAQ,CAACE,eAAe,CAACJ,YAAY,EAAE,MAAM,CAAC;IACtDc,KAAK,CAACT,YAAY,CAAC,IAAI,EAAEX,WAAW,GAAG,QAAQ,CAAC;IAChDoB,KAAK,CAACT,YAAY,CAAC,QAAQ,EAAE,KAAK,CAAC;IACnCJ,GAAG,CAACY,WAAW,CAACC,KAAK,CAAC;EACxB;EAEA,IAAI,CAACC,KAAK,EAAE;IACVA,KAAK,GAAGb,QAAQ,CAACE,eAAe,CAACJ,YAAY,EAAE,MAAM,CAAC;IACtDe,KAAK,CAACV,YAAY,CAAC,IAAI,EAAEX,WAAW,GAAG,QAAQ,CAAC;IAChDqB,KAAK,CAACV,YAAY,CAAC,QAAQ,EAAE,KAAK,CAAC;IACnCJ,GAAG,CAACY,WAAW,CAACE,KAAK,CAAC;EACxB;EAEAD,KAAK,CAACT,YAAY,CAAC,IAAI,EAAEV,CAAC,CAAC;EAC3BmB,KAAK,CAACT,YAAY,CAAC,IAAI,EAAE,GAAG,CAAC;EAC7BS,KAAK,CAACT,YAAY,CAAC,IAAI,EAAEV,CAAC,CAAC;EAC3BmB,KAAK,CAACT,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC;EAEhCU,KAAK,CAACV,YAAY,CAAC,IAAI,EAAE,GAAG,CAAC;EAC7BU,KAAK,CAACV,YAAY,CAAC,IAAI,EAAET,CAAC,CAAC;EAC3BmB,KAAK,CAACV,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC;EAChCU,KAAK,CAACV,YAAY,CAAC,IAAI,EAAET,CAAC,CAAC;;EAE3B;EACA,IAAIoB,WAAW,GAAGd,QAAQ,CAACC,cAAc,CAACT,WAAW,GAAG,OAAO,CAAC;EAChE,IAAI,CAACsB,WAAW,EAAE;IACdA,WAAW,GAAGd,QAAQ,CAACE,eAAe,CAACJ,YAAY,EAAE,MAAM,CAAC;IAC5DgB,WAAW,CAACX,YAAY,CAAC,IAAI,EAAEX,WAAW,GAAG,OAAO,CAAC;IACrDsB,WAAW,CAACX,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC;IACzCW,WAAW,CAACX,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;IACrCW,WAAW,CAACX,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC;IACnCJ,GAAG,CAACY,WAAW,CAACG,WAAW,CAAC;EAChC;EAEAA,WAAW,CAACC,WAAW,GAAI,MAAKpB,EAAG,QAAOC,EAAG,QAAOC,EAAG,EAAC;AAC1D;AAEF,OAAO,eAAemB,UAAUA,CAACC,OAAO,EAAE;EAEtC5B,UAAU,CAAC,CAAC;;EAER;EACA;EACA;EACA6B,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,OAAO,CAAC;EAClC,IAAIG,cAAc,GAAG,IAAI;EACzB,IAAI;IACA;IACA7C,MAAM,GAAG,IAAI8C,CAAC,CAACC,UAAU,CAAC,CAAC;IAC3B/C,MAAM,CAACgD,SAAS,GAAG,QAAQ;IAC3BhD,MAAM,CAACiD,IAAI,CAAC,CAAC;EACjB,CAAC,CAAC,OAAOC,SAAS,EAAE;IAEhB;IACAL,cAAc,GAAG,KAAK;EAE1B;;EAEA;EACA;EACA;EACA3C,MAAM,GAAG,IAAI4C,CAAC,CAACK,UAAU,CAAC,CAAC;EAC3BjD,MAAM,CAAC8C,SAAS,GAAG,QAAQ;EAC3B9C,MAAM,CAACkD,WAAW,GAAG,GAAG;EACxBlD,MAAM,CAAC+C,IAAI,CAAC,CAAC;EACb;EACA9C,MAAM,GAAG,IAAI2C,CAAC,CAACK,UAAU,CAAC,CAAC;EAC3BhD,MAAM,CAAC6C,SAAS,GAAG,QAAQ;EAC3B7C,MAAM,CAACiD,WAAW,GAAG,GAAG;EACxBjD,MAAM,CAAC8C,IAAI,CAAC,CAAC;EACb;EACA7C,MAAM,GAAG,IAAI0C,CAAC,CAACK,UAAU,CAAC,CAAC;EAC3B/C,MAAM,CAAC4C,SAAS,GAAG,QAAQ;EAC3B5C,MAAM,CAACgD,WAAW,GAAG,GAAG;EACxBhD,MAAM,CAAC6C,IAAI,CAAC,CAAC;EAEb5C,YAAY,GAAGoB,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC2B,WAAW;EAC5D/C,aAAa,GAAGmB,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC4B,YAAY;EAC9D/C,YAAY,GAAGkB,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC2B,WAAW;EAC5D7C,aAAa,GAAGiB,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC4B,YAAY;EAC9D7C,YAAY,GAAGgB,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC2B,WAAW;EAC5D3C,aAAa,GAAGe,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC4B,YAAY;;EAG9D;EACA;EACA;EACA;;EAEA;EACArD,MAAM,GAAG,IAAI6C,CAAC,CAAC7C,MAAM,CAAC,CAAC;EAEvB0C,OAAO,CAACC,GAAG,CAAC,IAAI,EAAE3C,MAAM,CAACsD,IAAI,CAAC;EAC9BZ,OAAO,CAACC,GAAG,CAAC3C,MAAM,CAACuD,QAAQ,CAAC;EAC5BvD,MAAM,CAACsD,IAAI,GAACb,OAAO,CAACe,IAAI;EACxBd,OAAO,CAACC,GAAG,CAAC,IAAI,EAAE3C,MAAM,CAACsD,IAAI,CAAC;;EAE9B;;EAEA,eAAeG,YAAYA,CAAA,EAC3B;IACE,MAAMhB,OAAO,CAACiB,WAAW,CAAC,CAAC,CAACC,IAAI,CAACC,MAAM,IAAE;MAErC5D,MAAM,CAACuD,QAAQ,GAAGK,MAAM;MACxB;IAEF,CAAC,CAAC;EACN;;EAEA,MAAMC,EAAE,GAAG,MAAMJ,YAAY,CAAC,CAAC,CAAC,CAAK;;EAGrCf,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAC,OAAO3C,MAAO,CAAC;EAC5C0C,OAAO,CAACC,GAAG,CAAC,cAAc,GAAG,OAAO3C,MAAM,CAACsD,IAAK,CAAC;EACjDZ,OAAO,CAACC,GAAG,CAAC,WAAW,EAAC3C,MAAM,CAAC;EAC/B0C,OAAO,CAACC,GAAG,CAAC3C,MAAM,CAAC,UAAU,CAAC,CAAC;;EAE/B;EACA;EACA;EACAC,MAAM,CAAC6D,GAAG,CAAC9D,MAAM,CAAC;;EAElB;EACAC,MAAM,CAAC8D,MAAM,CAAC,CAAC;;EAEf;EACA;EACA;EACA;EACA;EACA9D,MAAM,CAAC+D,UAAU,GAAG,YAAY;IAE5B;IACA;IACA;IACA9D,MAAM,CAAC4D,GAAG,CAAC9D,MAAM,CAAC;IAClBE,MAAM,CAAC6D,MAAM,CAAC,CAAC;IACf5D,MAAM,CAAC2D,GAAG,CAAC9D,MAAM,CAAC;IAClBG,MAAM,CAAC4D,MAAM,CAAC,CAAC;IAEf,IAAInB,cAAc,EAAE;MAChB7C,MAAM,CAAC+D,GAAG,CAAC9D,MAAM,CAAC;MAClBD,MAAM,CAACgE,MAAM,CAAC,CAAC;IACnB;IAEArD,MAAM,GAAGV,MAAM,CAACiE,MAAM;IACtBtD,MAAM,GAAGX,MAAM,CAACkE,MAAM;IACtBtD,MAAM,GAAGZ,MAAM,CAACmE,MAAM;;IAEtB;;IAEA;IACZ;;IAEY;IACAtE,GAAG,GAAG,IAAIuE,GAAG,CAACC,GAAG,CAAC,CAAC;IACnB3B,OAAO,CAACC,GAAG,CAAC9C,GAAG,CAAC;;IAGhB;IACA,IAAIyE,SAAS,GAAGzE,GAAG,CAAC0E,SAAS,CAAC,QAAQ,CAAC;IACvC;IACA;IACA,IAAIC,YAAY,GAAGF,SAAS,CAACR,GAAG,CAAC9D,MAAM,EAAE,iBAAiB,CAAC;IAC3D;IACA,IAAIyE,iBAAiB,GAAGH,SAAS,CAACR,GAAG,CAAC9D,MAAM,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;IAC9D;IACA,IAAI0E,wBAAwB,GAAGJ,SAAS,CAACR,GAAG,CAAC9D,MAAM,EAAE,gBAAgB,EACjEA,MAAM,CAAC2E,GAAG,EAAE3E,MAAM,CAAC4E,GAAG,CAAC;IAC3B,IAAIC,wBAAwB,GAAGP,SAAS,CAACR,GAAG,CAAC9D,MAAM,EAAE,gBAAgB,EACjEA,MAAM,CAAC2E,GAAG,EAAE3E,MAAM,CAAC4E,GAAG,CAAC;IAC3B,IAAIE,qBAAqB,GAAGR,SAAS,CAACR,GAAG,CAAC9D,MAAM,EAAE,WAAW,EAAEA,MAAM,CAAC2E,GAAG,EACrE3E,MAAM,CAAC4E,GAAG,CAAC;IACf,IAAIG,qBAAqB,GAAGT,SAAS,CAACR,GAAG,CAAC9D,MAAM,EAAE,YAAY,EAAEA,MAAM,CAAC2E,GAAG,EACtE3E,MAAM,CAAC4E,GAAG,CAAC;IACf;IACA;IACA,IAAII,gBAAgB,GAAGV,SAAS,CAACR,GAAG,CAAC9D,MAAM,EAAE,QAAQ,EAAE,CAAC,EACpDA,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACxB,IAAIC,gBAAgB,GAAGZ,SAAS,CAACR,GAAG,CAAC9D,MAAM,EAAE,QAAQ,EAAE,CAAC,EACpDA,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACxB,IAAIE,gBAAgB,GAAGb,SAAS,CAACR,GAAG,CAAC9D,MAAM,EAAE,QAAQ,EAAE,CAAC,EACpDA,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACxBX,SAAS,CAACc,IAAI,CAAC,CAAC;;IAE5B;;IAEA;;IAEA5D,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC4D,gBAAgB,CAAC,OAAO,EAAE,UAASC,KAAK,EAAE;MAC1E;MACA,IAAIxF,gBAAgB,EAAE;QAClBA,gBAAgB,GAAG,KAAK;MAC5B,CAAC,MAAM;QACHA,gBAAgB,GAAG,IAAI;MAC3B;IACF,CAAC,CAAC;IACF0B,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC4D,gBAAgB,CAAC,OAAO,EAAE,UAASC,KAAK,EAAE;MAC1E,IAAIxF,gBAAgB,EAAE;QAClBA,gBAAgB,GAAG,KAAK;MAC5B,CAAC,MAAM;QACHA,gBAAgB,GAAG,IAAI;MAC3B;IACF,CAAC,CAAC;IACF0B,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC4D,gBAAgB,CAAC,OAAO,EAAE,UAASC,KAAK,EAAE;MAC1E,IAAIxF,gBAAgB,EAAE;QAClBA,gBAAgB,GAAG,KAAK;MAC5B,CAAC,MAAM;QACHA,gBAAgB,GAAG,IAAI;MAC3B;IACF,CAAC,CAAC;;IAEF;;IAEA;;IAEA;IACA,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAACyF,OAAO,CAACC,EAAE,IAAI;MACzC,MAAMC,OAAO,GAAGjE,QAAQ,CAACC,cAAc,CAAC+D,EAAE,CAAC;MAC3CC,OAAO,CAACC,QAAQ,GAAG,CAAC,CAAC,CAAE;MACvBD,OAAO,CAACJ,gBAAgB,CAAC,OAAO,EAAE,YAAW;QACzC,IAAI,CAACM,KAAK,CAAC,CAAC,CAAC,CAAE;MACnB,CAAC,CAAC;IACN,CAAC,CAAC;;IAEF;;IAEA;IACAnE,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC4D,gBAAgB,CAAC,SAAS,EAAE,UAASC,KAAK,EAAE;MAC1EA,KAAK,CAACM,eAAe,CAAC,CAAC;MACvBN,KAAK,CAACO,cAAc,CAAC,CAAC;MAEtBnD,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;MAClB,IAAG,CAAC7C,gBAAgB,EACpBA,gBAAgB,GAAG,IAAI;MAEvB,MAAMgG,GAAG,GAAGR,KAAK,CAACQ,GAAG;MAErB,QAAOA,GAAG;QAER,KAAK,WAAW;UAEhB9F,MAAM,CAACkE,MAAM,EAAE;UACf;QAEA,KAAK,YAAY;UAEjBlE,MAAM,CAACkE,MAAM,EAAE;UACf;QAEA,KAAK,SAAS;UAEdlE,MAAM,CAACmE,MAAM,EAAE;UACf;QAEA,KAAK,WAAW;UAEhBnE,MAAM,CAACmE,MAAM,EAAE;UACf;QAEA;UACA;MAEF;;MAEA;;MAEA,MAAM4B,aAAa,GAAG/F,MAAM,CAACkE,MAAM,GAAGlE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MACrD,MAAMe,aAAa,GAAGhG,MAAM,CAACmE,MAAM,GAAGnE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MAErD,MAAMhE,CAAC,GAAG8E,aAAa,GAAG3F,YAAY;MACtC,MAAMc,CAAC,GAAG8E,aAAa,GAAG3F,aAAa;;MAErC;;MAEA,MAAM4F,aAAa,GAAIjG,MAAM,CAACiE,MAAM,GAAGjE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MACtD,MAAMiB,aAAa,GAAIlG,MAAM,CAACmE,MAAM,GAAGnE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MAEtD,MAAMkB,MAAM,GAAGF,aAAa,GAAG3F,YAAY;MAC3C,MAAM8F,MAAM,GAAGF,aAAa,GAAG3F,aAAa;;MAE5C;;MAEA,MAAM8F,aAAa,GAAIrG,MAAM,CAACiE,MAAM,GAAGjE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MACtD,MAAMqB,aAAa,GAAItG,MAAM,CAACkE,MAAM,GAAGlE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MAEtD,MAAMsB,MAAM,GAAGF,aAAa,GAAG7F,YAAY;MAC3C,MAAMgG,MAAM,GAAGF,aAAa,GAAG7F,aAAa;;MAE5C;MACAM,eAAe,CAAC,QAAQ,EAAEE,CAAC,EAAEC,CAAC,EAAElB,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;MAC5EpD,eAAe,CAAC,QAAQ,EAAEoF,MAAM,EAAEC,MAAM,EAAEpG,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;MACtFpD,eAAe,CAAC,QAAQ,EAAEwF,MAAM,EAAEC,MAAM,EAAExG,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;;MAEtF;MACAjE,MAAM,CAAC6D,MAAM,CAAC,CAAC;MACf5D,MAAM,CAAC4D,MAAM,CAAC,CAAC;MAEfrD,MAAM,GAAGV,MAAM,CAACiE,MAAM;MACtBtD,MAAM,GAAGX,MAAM,CAACkE,MAAM;MACtBtD,MAAM,GAAGZ,MAAM,CAACmE,MAAM;IAE5B,CAAC,CAAC;;IAEF;IACA3C,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC4D,gBAAgB,CAAC,SAAS,EAAE,UAASC,KAAK,EAAE;MAC1EA,KAAK,CAACM,eAAe,CAAC,CAAC;MACvBN,KAAK,CAACO,cAAc,CAAC,CAAC;MAEtB,IAAG,CAAC/F,gBAAgB,EACpBA,gBAAgB,GAAG,IAAI;MAEvB,MAAMgG,GAAG,GAAGR,KAAK,CAACQ,GAAG;MAErB,QAAOA,GAAG;QAER,KAAK,WAAW;UAEhB9F,MAAM,CAACiE,MAAM,EAAE;UACf;QAEA,KAAK,YAAY;UAEjBjE,MAAM,CAACiE,MAAM,EAAE;UACf;QAEA,KAAK,SAAS;UAEdjE,MAAM,CAACmE,MAAM,EAAE;UACf;QAEA,KAAK,WAAW;UAEhBnE,MAAM,CAACmE,MAAM,EAAE;UACf;QAEA;UACA;MAEF;;MAEA;;MAEA,MAAM8B,aAAa,GAAGjG,MAAM,CAACiE,MAAM,GAAGjE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MACrD,MAAMiB,aAAa,GAAGlG,MAAM,CAACmE,MAAM,GAAGnE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MAErD,MAAMhE,CAAC,GAAGgF,aAAa,GAAG3F,YAAY;MACtC,MAAMY,CAAC,GAAGgF,aAAa,GAAG3F,aAAa;;MAErC;;MAEA,MAAMwF,aAAa,GAAI/F,MAAM,CAACkE,MAAM,GAAGlE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MACtD,MAAMe,aAAa,GAAIhG,MAAM,CAACmE,MAAM,GAAGnE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MAEtD,MAAMwB,MAAM,GAAGV,aAAa,GAAG3F,YAAY;MAC3C,MAAMsG,MAAM,GAAGV,aAAa,GAAG3F,aAAa;;MAE5C;;MAEA,MAAMgG,aAAa,GAAIrG,MAAM,CAACiE,MAAM,GAAGjE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MACtD,MAAMqB,aAAa,GAAItG,MAAM,CAACkE,MAAM,GAAGlE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MAEtD,MAAMsB,MAAM,GAAGF,aAAa,GAAG7F,YAAY;MAC3C,MAAMgG,MAAM,GAAGF,aAAa,GAAG7F,aAAa;;MAE5C;MACAM,eAAe,CAAC,QAAQ,EAAE0F,MAAM,EAAEC,MAAM,EAAE1G,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;MACtFpD,eAAe,CAAC,QAAQ,EAAEE,CAAC,EAAEC,CAAC,EAAElB,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;MAC5EpD,eAAe,CAAC,QAAQ,EAAEwF,MAAM,EAAEC,MAAM,EAAExG,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;;MAEtF;MACAlE,MAAM,CAAC8D,MAAM,CAAC,CAAC;MACf5D,MAAM,CAAC4D,MAAM,CAAC,CAAC;MAEfrD,MAAM,GAAGV,MAAM,CAACiE,MAAM;MACtBtD,MAAM,GAAGX,MAAM,CAACkE,MAAM;MACtBtD,MAAM,GAAGZ,MAAM,CAACmE,MAAM;IAC5B,CAAC,CAAC;;IAEF;IACA3C,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC4D,gBAAgB,CAAC,SAAS,EAAE,UAASC,KAAK,EAAE;MAC1EA,KAAK,CAACM,eAAe,CAAC,CAAC;MACvBN,KAAK,CAACO,cAAc,CAAC,CAAC;MAEtB,IAAG,CAAC/F,gBAAgB,EACpBA,gBAAgB,GAAG,IAAI;MAEvB,MAAMgG,GAAG,GAAGR,KAAK,CAACQ,GAAG;MAErB,QAAOA,GAAG;QAER,KAAK,WAAW;UAEhB9F,MAAM,CAACiE,MAAM,EAAE;UACf;QAEA,KAAK,YAAY;UAEjBjE,MAAM,CAACiE,MAAM,EAAE;UACf;QAEA,KAAK,SAAS;UAEdjE,MAAM,CAACkE,MAAM,EAAE;UACf;QAEA,KAAK,WAAW;UAEhBlE,MAAM,CAACkE,MAAM,EAAE;UACf;QAEA;UACA;MAGF;;MAEA;;MAEA,MAAMmC,aAAa,GAAGrG,MAAM,CAACiE,MAAM,GAAGjE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MACrD,MAAMqB,aAAa,GAAGtG,MAAM,CAACkE,MAAM,GAAGlE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MAErD,MAAMhE,CAAC,GAAGoF,aAAa,GAAG7F,YAAY;MACtC,MAAMU,CAAC,GAAGoF,aAAa,GAAG7F,aAAa;;MAErC;;MAEA,MAAMsF,aAAa,GAAI/F,MAAM,CAACkE,MAAM,GAAGlE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MACtD,MAAMe,aAAa,GAAIhG,MAAM,CAACmE,MAAM,GAAGnE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MAEtD,MAAMwB,MAAM,GAAGV,aAAa,GAAG3F,YAAY;MAC3C,MAAMsG,MAAM,GAAGV,aAAa,GAAG3F,aAAa;;MAE5C;;MAEA,MAAM4F,aAAa,GAAIjG,MAAM,CAACiE,MAAM,GAAGjE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MACtD,MAAMiB,aAAa,GAAIlG,MAAM,CAACmE,MAAM,GAAGnE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MAEtD,MAAMkB,MAAM,GAAGF,aAAa,GAAG3F,YAAY;MAC3C,MAAM8F,MAAM,GAAGF,aAAa,GAAG3F,aAAa;;MAE5C;MACAQ,eAAe,CAAC,QAAQ,EAAE0F,MAAM,EAAEC,MAAM,EAAE1G,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;MACtFpD,eAAe,CAAC,QAAQ,EAAEoF,MAAM,EAAEC,MAAM,EAAEpG,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;MACtFpD,eAAe,CAAC,QAAQ,EAAEE,CAAC,EAAEC,CAAC,EAAElB,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;;MAE5E;MACAlE,MAAM,CAAC8D,MAAM,CAAC,CAAC;MACf7D,MAAM,CAAC6D,MAAM,CAAC,CAAC;MAEfrD,MAAM,GAAGV,MAAM,CAACiE,MAAM;MACtBtD,MAAM,GAAGX,MAAM,CAACkE,MAAM;MACtBtD,MAAM,GAAGZ,MAAM,CAACmE,MAAM;IAC5B,CAAC,CAAC;;IAEF;;IAEA;;IAEA;IACA3C,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC4D,gBAAgB,CAAC,WAAW,EAAE,UAAUC,KAAK,EAAE;MAE/E,IAAGxF,gBAAgB,EACnB;MAEE,MAAM6G,IAAI,GAAG,IAAI,CAACC,qBAAqB,CAAC,CAAC;MACzC,MAAM3F,CAAC,GAAGqE,KAAK,CAACuB,OAAO,GAAGF,IAAI,CAAC5E,IAAI,CAAC,CAAC;MACrC,MAAMb,CAAC,GAAGoE,KAAK,CAACwB,OAAO,GAAGH,IAAI,CAAC7E,GAAG,CAAC,CAAE;;MAErC;MACA;MACA,MAAMiF,WAAW,GAAG9F,CAAC,GAAGb,YAAY;MACpC,MAAM4G,WAAW,GAAG9F,CAAC,GAAGb,aAAa;MAErC,MAAM4G,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACJ,WAAW,GAAG/G,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC,CAAC;MAC3D,MAAMmC,SAAS,GAAGF,IAAI,CAACC,KAAK,CAACH,WAAW,GAAGhH,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC,CAAC;;MAE3D;MACAjF,MAAM,CAACkE,MAAM,GAAG+C,SAAS;MACzBjH,MAAM,CAACmE,MAAM,GAAGiD,SAAS;;MAEzB;;MAEA;;MAEA,MAAMnB,aAAa,GAAIjG,MAAM,CAACiE,MAAM,GAAGjE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MACtD,MAAMiB,aAAa,GAAIlG,MAAM,CAACmE,MAAM,GAAGnE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MAEtD,MAAMkB,MAAM,GAAGF,aAAa,GAAG3F,YAAY;MAC3C,MAAM8F,MAAM,GAAGF,aAAa,GAAG3F,aAAa;;MAE5C;;MAEA,MAAM8F,aAAa,GAAIrG,MAAM,CAACiE,MAAM,GAAGjE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MACtD,MAAMqB,aAAa,GAAItG,MAAM,CAACkE,MAAM,GAAGlE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MAEtD,MAAMsB,MAAM,GAAGF,aAAa,GAAG7F,YAAY;MAC3C,MAAMgG,MAAM,GAAGF,aAAa,GAAG7F,aAAa;;MAE5C;MACAM,eAAe,CAAC,QAAQ,EAAEE,CAAC,EAAEC,CAAC,EAAElB,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;MAC5EpD,eAAe,CAAC,QAAQ,EAAEoF,MAAM,EAAEC,MAAM,EAAEpG,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;MACtFpD,eAAe,CAAC,QAAQ,EAAEwF,MAAM,EAAEC,MAAM,EAAExG,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;;MAEtF;MACAjE,MAAM,CAAC6D,MAAM,CAAC,CAAC;MACf5D,MAAM,CAAC4D,MAAM,CAAC,CAAC;MAEfrD,MAAM,GAAGV,MAAM,CAACiE,MAAM;MACtBtD,MAAM,GAAGX,MAAM,CAACkE,MAAM;MACtBtD,MAAM,GAAGZ,MAAM,CAACmE,MAAM;IAElB,CAAC,CAAC;;IAEV;IACA3C,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC4D,gBAAgB,CAAC,WAAW,EAAE,UAAUC,KAAK,EAAE;MAE7E,IAAGxF,gBAAgB,EACnB;MAEA,MAAM6G,IAAI,GAAG,IAAI,CAACC,qBAAqB,CAAC,CAAC;MACzC,MAAM3F,CAAC,GAAGqE,KAAK,CAACuB,OAAO,GAAGF,IAAI,CAAC5E,IAAI,CAAC,CAAC;MACrC,MAAMb,CAAC,GAAGoE,KAAK,CAACwB,OAAO,GAAGH,IAAI,CAAC7E,GAAG,CAAC,CAAE;;MAErC;MACA;MACA,MAAMiF,WAAW,GAAG9F,CAAC,GAAGX,YAAY;MACpC,MAAM0G,WAAW,GAAG9F,CAAC,GAAGX,aAAa;MAErC,MAAM8G,SAAS,GAAGH,IAAI,CAACC,KAAK,CAACJ,WAAW,GAAG/G,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC,CAAC;MAC3D,MAAMmC,SAAS,GAAGF,IAAI,CAACC,KAAK,CAACH,WAAW,GAAGhH,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC,CAAC;;MAE3D;MACAjF,MAAM,CAACiE,MAAM,GAAGoD,SAAS;MACzBrH,MAAM,CAACmE,MAAM,GAAGiD,SAAS;;MAEzB;;MAEA,MAAMrB,aAAa,GAAI/F,MAAM,CAACkE,MAAM,GAAGlE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MACtD,MAAMe,aAAa,GAAIhG,MAAM,CAACmE,MAAM,GAAGnE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MAEtD,MAAMwB,MAAM,GAAGV,aAAa,GAAG3F,YAAY;MAC3C,MAAMsG,MAAM,GAAGV,aAAa,GAAG3F,aAAa;;MAE5C;;MAEA,MAAMgG,aAAa,GAAIrG,MAAM,CAACiE,MAAM,GAAGjE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MACtD,MAAMqB,aAAa,GAAItG,MAAM,CAACkE,MAAM,GAAGlE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MAEtD,MAAMsB,MAAM,GAAGF,aAAa,GAAG7F,YAAY;MAC3C,MAAMgG,MAAM,GAAGF,aAAa,GAAG7F,aAAa;;MAE5C;MACAM,eAAe,CAAC,QAAQ,EAAEE,CAAC,EAAEC,CAAC,EAAElB,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;MAC5EpD,eAAe,CAAC,QAAQ,EAAE0F,MAAM,EAAEC,MAAM,EAAE1G,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;MACtFpD,eAAe,CAAC,QAAQ,EAAEwF,MAAM,EAAEC,MAAM,EAAExG,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;;MAEtF;MACAlE,MAAM,CAAC8D,MAAM,CAAC,CAAC;MACf5D,MAAM,CAAC4D,MAAM,CAAC,CAAC;MAEfrD,MAAM,GAAGV,MAAM,CAACiE,MAAM;MACtBtD,MAAM,GAAGX,MAAM,CAACkE,MAAM;MACtBtD,MAAM,GAAGZ,MAAM,CAACmE,MAAM;IAElB,CAAC,CAAC;;IAEV;IACA3C,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC4D,gBAAgB,CAAC,WAAW,EAAE,UAAUC,KAAK,EAAE;MAE/E,IAAGxF,gBAAgB,EACnB;MAEE,MAAM6G,IAAI,GAAG,IAAI,CAACC,qBAAqB,CAAC,CAAC;MACzC,MAAM3F,CAAC,GAAGqE,KAAK,CAACuB,OAAO,GAAGF,IAAI,CAAC5E,IAAI,CAAC,CAAC;MACrC,MAAMb,CAAC,GAAGoE,KAAK,CAACwB,OAAO,GAAGH,IAAI,CAAC7E,GAAG,CAAC,CAAE;;MAErC;MACA;MACA,MAAMiF,WAAW,GAAG9F,CAAC,GAAG,IAAI,CAACmC,WAAW;MACxC,MAAM4D,WAAW,GAAG9F,CAAC,GAAG,IAAI,CAACmC,YAAY;MAEzC,MAAMgE,SAAS,GAAGH,IAAI,CAACC,KAAK,CAACJ,WAAW,GAAG/G,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC,CAAC;MAC3D,MAAMgC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACH,WAAW,GAAGhH,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC,CAAC;;MAE3D;MACAjF,MAAM,CAACiE,MAAM,GAAGoD,SAAS;MACzBrH,MAAM,CAACkE,MAAM,GAAG+C,SAAS;;MAEzB;;MAEA,MAAMlB,aAAa,GAAI/F,MAAM,CAACkE,MAAM,GAAGlE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MACtD,MAAMe,aAAa,GAAIhG,MAAM,CAACmE,MAAM,GAAGnE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MAEtD,MAAMwB,MAAM,GAAGV,aAAa,GAAG3F,YAAY;MAC3C,MAAMsG,MAAM,GAAGV,aAAa,GAAG3F,aAAa;;MAE5C;;MAEA,MAAM4F,aAAa,GAAIjG,MAAM,CAACiE,MAAM,GAAGjE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MACtD,MAAMiB,aAAa,GAAIlG,MAAM,CAACmE,MAAM,GAAGnE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;MAEtD,MAAMkB,MAAM,GAAGF,aAAa,GAAG3F,YAAY;MAC3C,MAAM8F,MAAM,GAAGF,aAAa,GAAG3F,aAAa;;MAE5C;MACAQ,eAAe,CAAC,QAAQ,EAAEE,CAAC,EAAEC,CAAC,EAAElB,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;MAC5EpD,eAAe,CAAC,QAAQ,EAAE0F,MAAM,EAAEC,MAAM,EAAE1G,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;MACtFpD,eAAe,CAAC,QAAQ,EAAEoF,MAAM,EAAEC,MAAM,EAAEpG,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;;MAGtF;MACAlE,MAAM,CAAC8D,MAAM,CAAC,CAAC;MACf7D,MAAM,CAAC6D,MAAM,CAAC,CAAC;MAEfrD,MAAM,GAAGV,MAAM,CAACiE,MAAM;MACtBtD,MAAM,GAAGX,MAAM,CAACkE,MAAM;MACtBtD,MAAM,GAAGZ,MAAM,CAACmE,MAAM;IAElB,CAAC,CAAC;IACV;EAEI,CAAC;AAGL;;AAEA;AACA,OAAO,SAASmD,QAAQA,CAACC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAC;EAAK;;EAExC3H,gBAAgB,GAAG,IAAI;EAEvBE,MAAM,CAACiE,MAAM,GAAGsD,GAAG;EACnBvH,MAAM,CAACkE,MAAM,GAAGsD,GAAG;EACnBxH,MAAM,CAACmE,MAAM,GAAGsD,GAAG;EAEnB/E,OAAO,CAACC,GAAG,CAAC4E,GAAG,EAAEC,GAAG,EAAEC,GAAG,CAAC;EAC1B/E,OAAO,CAACC,GAAG,CAAC3C,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;;EAGxD;EACA;EACA,MAAM4B,aAAa,GAAG/F,MAAM,CAACkE,MAAM,GAAGlE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;EACrD,MAAMe,aAAa,GAAGhG,MAAM,CAACmE,MAAM,GAAGnE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;EAErD,MAAMwB,MAAM,GAAGV,aAAa,GAAG3F,YAAY;EAC3C,MAAMsG,MAAM,GAAGV,aAAa,GAAG3F,aAAa;;EAE5C;;EAEA,MAAM4F,aAAa,GAAIjG,MAAM,CAACiE,MAAM,GAAGjE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;EACtD,MAAMiB,aAAa,GAAIlG,MAAM,CAACmE,MAAM,GAAGnE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;EAEtD,MAAMkB,MAAM,GAAGF,aAAa,GAAG3F,YAAY;EAC3C,MAAM8F,MAAM,GAAGF,aAAa,GAAG3F,aAAa;;EAE5C;;EAEA,MAAM8F,aAAa,GAAIrG,MAAM,CAACiE,MAAM,GAAGjE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;EACtD,MAAMqB,aAAa,GAAItG,MAAM,CAACkE,MAAM,GAAGlE,MAAM,CAACiF,KAAK,CAAC,CAAC,CAAC;EAEtD,MAAMsB,MAAM,GAAGF,aAAa,GAAG7F,YAAY;EAC3C,MAAMgG,MAAM,GAAGF,aAAa,GAAG7F,aAAa;;EAE5C;EACAM,eAAe,CAAC,QAAQ,EAAE0F,MAAM,EAAEC,MAAM,EAAE1G,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;EACtFpD,eAAe,CAAC,QAAQ,EAAEoF,MAAM,EAAEC,MAAM,EAAEpG,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;EACtFpD,eAAe,CAAC,QAAQ,EAAEwF,MAAM,EAAEC,MAAM,EAAExG,MAAM,CAACiE,MAAM,EAAEjE,MAAM,CAACkE,MAAM,EAAElE,MAAM,CAACmE,MAAM,CAAC;;EAGtF;;EAEAlE,MAAM,CAAC8D,MAAM,CAAC,CAAC;EACf7D,MAAM,CAAC6D,MAAM,CAAC,CAAC;EACf5D,MAAM,CAAC4D,MAAM,CAAC,CAAC;EAEfrD,MAAM,GAAGV,MAAM,CAACiE,MAAM;EACtBtD,MAAM,GAAGX,MAAM,CAACkE,MAAM;EACtBtD,MAAM,GAAGZ,MAAM,CAACmE,MAAM;AAE1B;AAEA,OAAO,SAASuD,QAAQA,CAAA,EAAE;EAEtB,OAAQ;IAAC,GAAG,EAAChH,MAAM;IAAC,GAAG,EAAEC,MAAM;IAAC,GAAG,EAAEC;EAAM,CAAC;AAEhD;;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}